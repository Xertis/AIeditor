import os
from PyQt6 import uic, QtGui
from PyQt6.QtWidgets import QMainWindow
from PyQt6.QtGui import QAction
from src.ai_requests import AI
from src.sql.db_api import DB
from src.app.handlers import Handlers
from src.sql.db_tables import recent_files


class Aieditor(QMainWindow):
    def __init__(self):
        super(Aieditor, self).__init__()
        self.load_ui()
        self.ai = AI()
        self.db = DB()

        self.handlers = Handlers(self)

        self.ai_mode = self.ai.QA
        self.file = self.db.files.get_newest()
        self.file = self.file if self.file else recent_files()

        self.ai_chat_context = []
        self.if_main_text_data_saved = False if \
            self.file.id_unsave_data else True

        self.refresh_main_text()
        self.refresh_ai_history()
        self.load_connections()

    def load_ui(self):
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ
        –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        uic.loadUi('main.ui', self)
        self.setWindowTitle("AIeditor")
        self.ai_history.setReadOnly(True)
        self.selected_text = ""

    def closeEvent(self, event):
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
        –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã
        –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ
        –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è.
        """
        self.handlers.handler_save_data()
        self.db.session.close()

    def load_connections(self):
        """
        –ú–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞,
        —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å
        –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
        """
        self.ai_send_button.clicked.connect(self.handlers.handler_ai_send)
        self.main_text.selectionChanged.connect(
            self.handlers.handler_select_text)
        self.main_text.textChanged.connect(self.handlers.handler_text_changed)

        open_action = QAction("Open file", self)
        open_action.triggered.connect(self.handlers.handler_load_file)
        self.toolbar.addAction(open_action)

        save_action = QAction("Save file", self)
        save_action.triggered.connect(self.handlers.handler_save_file)
        self.toolbar.addAction(save_action)

    def refresh_main_text(self):
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤ –≥–ª–∞–≤–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –±–¥.
        """
        file_path = self.file.path if self.file.path else ''

        if self.file.id_unsave_data:
            unsave_data = self.db.unsave.get_by_id(self.file.id_unsave_data)
            self.main_text.setPlainText(unsave_data.text)
            return

        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as file:
                text = file.read()
                f = self.db.files.get_by_path(path=file_path)
                if f:
                    unsave_data = self.db.unsave.get_by_id(id=f.id_unsave_data)
                    if unsave_data:
                        text = unsave_data.text
                        self.if_main_text_data_saved = False

                self.main_text.setPlainText(text)
                file.close()
        else:
            self.main_text.setPlainText('')

    def refresh_ai_history(self):
        """
        –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º
        –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –û–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–∏–¥–µ—Ç—å,
        –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ–Ω –∑–∞–¥–∞–≤–∞–ª –∏ –∫–∞–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–∞–ª.
        """
        file = self.file

        if file and file.id_requests_history:
            history = self.db.requests.get_by_id(file.id_requests_history).text
            self.ai_history.setPlainText(history)
            self.ai_chat_context = history.split('\n')
        else:
            self.ai_history.setPlainText('')
            self.ai_chat_context.clear()

    def ai_analysis(self):
        """
        –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏. –í—Ö–æ–¥–Ω—ã–µ
        –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏
        –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        out = ''
        if self.ai_mode == self.ai.QA:
            if len(self.ai_request.toPlainText()) == 0:
                return ''
            if len(self.main_text.toPlainText()) == 0:
                return ''

            out = self.ai.question_answering(
                self.ai_request.toPlainText(),
                self.main_text.toPlainText())
        elif self.ai_mode == self.ai.SUMMARING:
            if len(self.selected_text) == 0:
                return ''

            if self.ai_request.toPlainText().isnumeric():
                out = self.ai.summaring(
                    self.selected_text,
                    int(self.ai_request.toPlainText())
                )
            else:
                out = self.ai.summaring(self.selected_text)

        return f"[ü§ñ] {out}"

    def change_ai_mode(self):
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
        –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ "—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏ "QA", —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ
        —Ä–µ–∂–∏–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        request = self.ai_request.toPlainText().strip()

        if request.isnumeric():
            self.ai_mode = self.ai.SUMMARING
            return
        if len(request) == 0:
            self.ai_mode = self.ai.SUMMARING
            return

        self.ai_mode = self.ai.QA

    def add_to_history(self, *texts):
        """
        –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —Å
        –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –∫–∞–∫ –∑–∞–ø—Ä–æ—Å—ã
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∏ –æ—Ç–≤–µ—Ç—ã –ò–ò.
        """
        for text in texts:
            self.ai_chat_context.append(text)
        self.ai_history.setPlainText('\n'.join(self.ai_chat_context))

    def move_cursor_down(self, t):
        """
        –ú–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –≤ —Å–∞–º—ã–π –Ω–∏–∑
        """
        cursor = QtGui.QTextCursor(t.document())
        cursor.movePosition(QtGui.QTextCursor.MoveOperation.End)
        t.setTextCursor(cursor)
